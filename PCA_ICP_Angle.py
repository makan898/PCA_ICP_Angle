import alphashape
import numpy as np
from descartes import PolygonPatch
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
import math
import cv2

# 求出两个点之间的向量弧度，向量方向由点1指向点2
def GetTheAngleOfTwoPoints(x1,y1,x2,y2):
    return math.atan2(y2-y1,x2-x1)

# 求出两个点的距离
def GetDistOfTwoPoints(x1,y1,x2,y2):
    return math.sqrt(math.pow(x2-x1,2) + math.pow(y2-y1,2))

# 在pt_set点集中找到距(p_x，p_y)最近点的id
def GetClosestID(p_x,p_y,pt_set):
    id = 0
    min = 10000000
    for i in range(pt_set.shape[1]):
        dist = GetDistOfTwoPoints(p_x,p_y,pt_set[0][i],pt_set[1][i])
        if dist < min:
            id = i
            min = dist
    return id

# 求两个点集之间的平均点距
def DistOfTwoSet(set1,set2):
    loss = 0
    for i in range(set1.shape[1]):
        id = GetClosestID(set1[0][i],set1[1][i],set2)
        dist = GetDistOfTwoPoints(set1[0][i],set1[1][i],set2[0][id],set2[1][id])
        loss = loss + dist
    return loss/set1.shape[1]

def ICP(sourcePoints,targetPoints):
    A = targetPoints # A是标准点云
    B = sourcePoints # B是源点云

    iteration_times = 0 # 迭代次数为0
    dist_now = 1 # A,B两点集之间初始化距离
    dist_improve = 1 # A,B两点集之间初始化距离提升
    dist_before = DistOfTwoSet(A,B) # A,B两点集之间距离
    while iteration_times < 10 and dist_improve > 0.001: # 迭代次数小于10 并且 距离提升大于0.001时，继续迭代
        x_mean_target = A[0].mean() # 获得A点云的x坐标轴均值。
        y_mean_target = A[1].mean() # 获得A点云的y坐标轴均值。
        x_mean_source = B[0].mean() # 获得B点云的x坐标轴均值。
        y_mean_source = B[1].mean() # 获得B点云的y坐标轴均值。

        A_ = A.T - np.array([[x_mean_target],[y_mean_target]]) # 获得A点云的均一化后点云A_
        B_ = B.T - np.array([[x_mean_target],[y_mean_target]]) # 获得B点云的均一化后点云B_

        w_up = 0 # w_up，表示角度公式中的分母
        w_down = 0 # w_up，表示角度公式中的分子
        for i in range(A_.shape[1]): # 对点云中每个点进行循环
            j = GetClosestID(A_[0][i],A_[1][i],B) # 在B点云中找到距(A_[0][i],A_[1][i])最近点的id
            w_up_i = A_[0][i]*B_[1][j] - A_[1][i]*B_[0][j] # 获得求和公式，分母的一项
            w_down_i = A_[0][i]*B_[0][j] + A_[1][i]*B_[1][j] # 获得求和公式，分子的一项
            w_up = w_up + w_up_i
            w_down = w_down + w_down_i

        TheRadian = math.atan2(w_up,w_down) # 分母与分子之间的角度
        x = x_mean_target - math.cos(TheRadian)*x_mean_source - math.sin(TheRadian)*y_mean_source # x即为x轴偏移量
        y = x_mean_target + math.cos(TheRadian)*x_mean_source - math.sin(TheRadian)*y_mean_source # y即为y轴偏移量
        R = np.array([[math.cos(TheRadian),math.sin(TheRadian)],[-math.sin(TheRadian),math.cos(TheRadian)]]) # 由θ得到旋转矩阵。

        #B = np.matmul(R,B) + np.array([x],[y])

        iteration_times = iteration_times + 1 # 迭代次数+1
        dist_now = DistOfTwoSet(A,B) # 变换后两个点云之间的距离
        dist_improve = dist_before - dist_now # 这一次迭代，两个点云之间的距离提升。
        print("迭代第"+str(iteration_times)+"次，损失是"+str(dist_now)+",提升了"+str(dist_improve)) # 打印迭代次数、损失距离、损失提升
        dist_before = dist_now # 将"现在距离"赋值给"以前距离"，开始下一轮迭代循环。

    return pi_360(TheRadian)

def pi_360(_angle):
    angle = _angle * 180 / math.pi
    return angle

def bianjie(_list):
    '''
    n = 10
    points = np.random.rand(n, 2)
    print(points)
    '''
    points = np.array(_list) / 100
    '''
    points = []
    for (x,y) in list:
        points.append([x,y])
    '''

    print(points)

    # Define alpha parameter
    alpha= 0.9

    # Generate the alpha shape
    alpha_shape = alphashape.alphashape(points, alpha)

    # Initialize plot
    fig, ax = plt.subplots()

    # Plot input points
    ax.scatter(*zip(*points))

    # Plot alpha shape
    ax.add_patch(PolygonPatch(alpha_shape, alpha=.5, fc='blue', ec='red'))

    pnts = [x for x in alpha_shape.boundary.coords]
    plt.scatter(*zip(*pnts),marker='s')

    x,y = zip(*pnts)

    plt.show()
    '''
    #函数拟合
    noise = np.random.uniform(3,3,len(x))
    y += noise
    fig, ax = plt.subplots()
    ax.plot(x,y, 'b--')
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    #拟合函数
    coef = np.polyfit(x,y,2)
    y_fit = np.polyval(coef,x)
    ax.plot(x,y_fit,'g')
    #峰值
    if coef[0] != 0:
        x0 = -0.5 * coef[1] / coef[0]
        x0 = round(x0, 2)
        ax.plot([x0]*5, np.linspace(min(y),max(y),5,'r--'))
        print(x0)
    else:
        raise ValueError('Fail to fit.')
    #print(coef)


    plt.show()
    '''
    pca = PCA(n_components = 2)
    point = pca.fit(pnts).transform(pnts)
    plt.scatter(*zip(*pnts),marker='s')
    plt.scatter(*zip(*point),marker='s')

    #原始数据
    xa,ya = zip(*pnts)
    ca = (sum(xa)/len(xa), sum(ya)/len(ya))
    plt.scatter(ca[0],ca[1],marker='x',color='red',s=50,label='ca')

    #pca处理后
    xb,yb = zip(*point)
    cb = (sum(xb)/len(xb), sum(yb)/len(yb))
    plt.scatter(cb[0],cb[1],marker='x',color='red',s=50,label='cb')

    #重合移动
    dx = ((cb[0]-ca[0]))
    dy = ((cb[1])-ca[1])
    xy_ = []
    for x,y in pnts:
        xy_.append((x + dx,y + dy))

    plt.scatter(*zip(*xy_),marker='s')
    sourcePoints = np.array(point)
    targetPoints = np.array(xy_)
    print(sourcePoints,targetPoints)
    print(ICP(sourcePoints,targetPoints))
    plt.show()
    return ICP(sourcePoints,targetPoints)

    
if __name__ == '__main__':
    #IMG_0613.JPG左向き
    list = [(230.03164556962025, 1009.1803797468355), (491.0449438202247, 816.7752808988764), (509.36764705882354, 810.5), (486.5157894736842, 808.8526315789474), (43.17877094972067, 903.0093109869646), (493.5, 755.8888888888888), (244.77477477477478, 754.981981981982), (431.0886075949367, 749.3417721518987), (199.6326530612245, 755.3469387755101), (470.7567567567568, 747.5405405405406), (460.8709677419355, 742.1290322580645), (216.8521739130435, 741.3391304347826), (297.7672955974843, 740.8553459119497), (249.0677966101695, 733.7796610169491), (487.29629629629625, 728.2222222222222), (501.47619047619054, 736.8857142857144), (515.9245283018868, 725.6792452830189), (528.7875, 731.0250000000001), (396.90551181102364, 724.8503937007874), (474.46875, 720.9166666666666), (310.638418079096, 715.5367231638418), (432.78640776699024, 718.3980582524272), (522.8, 704.86), (254.03478260869565, 714.0173913043478), (387.5076923076923, 700.0153846153846), (535.6750000000001, 704.6625), (497.8333333333333, 704.25), (593.4285714285714, 697.9821428571428), (487.8490566037736, 697.7924528301886), (512.9622641509434, 696.9245283018868), (415.57142857142856, 691.9206349206349), (72.61059190031152, 738.0996884735202), (399.5483870967742, 682.483870967742), (315.59523809523813, 694.0654761904763), (357.40677966101697, 676.9830508474577), (215.84829721362232, 694.5696594427245), (597.063492063492, 678.2857142857142), (383.27868852459017, 673.1147540983607), (510.2, 676.65), (390.90273556231006, 718.5586626139818), (446.86538461538464, 671.1923076923077), (610.1590909090909, 665.8863636363636), (627.3333333333333, 661.0138888888888), (508.57142857142856, 653.5555555555555), (528.5657894736842, 651.2631578947368), (611.0909090909091, 641.2272727272727), (624.0666666666667, 634.3066666666667), (593.0, 628.3478260869565), (635.953125, 629.03125), (620.2291666666666, 619.2708333333333), (555.5573770491803, 619.8852459016393), (628.438596491228, 613.4736842105262), (564.296875, 615.75), (584.5648148148148, 606.3518518518518), (635.6829268292684, 592.4878048780488), (609.7575757575759, 604.6262626262627), (625.4305555555555, 588.3888888888888), (588.4848484848485, 579.0454545454546), (634.6666666666666, 570.6862745098039), (648.0583333333333, 576.0333333333333), (588.8955223880597, 560.6567164179104), (606.0, 560.204081632653), (620.2631578947369, 569.1578947368421), (631.7291666666666, 547.7916666666666), (581.0333333333333, 545.0), (561.0270270270271, 543.8783783783784), (641.375, 553.1597222222222), (650.8348623853211, 512.9449541284404), (613.9836065573771, 497.8360655737705), (644.2653061224489, 494.91836734693874), (631.1527777777777, 489.3194444444444), (591.6666666666667, 482.6266666666667), (581.5569620253165, 459.24050632911394), (622.1752577319587, 466.82474226804123), (595.9047619047619, 450.66666666666663), (651.7191011235955, 461.0), (643.2045454545455, 432.54545454545456), (640.5, 453.80660377358487), (584.0357142857142, 427.3333333333333), (617.4000000000001, 406.04), (609.6756756756757, 402.47297297297297), (624.0869565217391, 396.02173913043475), (634.5227272727273, 382.5681818181818), (632.6474358974359, 360.71794871794873), (597.909090909091, 345.6565656565657), (613.4084507042254, 342.4366197183099), (619.1911764705882, 327.9852941176471), (627.829268292683, 320.8048780487805), (612.0, 313.6341463414634), (228.5531914893617, 311.531914893617), (486.71875, 299.859375), (221.63636363636363, 299.94545454545454), (432.3090909090909, 296.0), (202.88646288209605, 308.6069868995633), (446.4912280701754, 289.0701754385965), (616.2560975609756, 296.390243902439), (568.3928571428571, 294.4642857142857), (334.81081081081084, 287.8581081081081), (421.8833333333333, 280.85), (357.4929577464789, 275.4929577464789), (221.08917197452232, 287.4140127388535), (327.3661971830986, 275.19718309859155), (596.5636363636363, 273.78181818181815), (586.4615384615385, 268.4871794871795), (490.0142857142857, 266.07142857142856), (434.4831460674157, 269.69662921348316), (362.2549019607843, 264.3529411764706), (250.4660194174757, 267.2912621359223), (219.38095238095238, 264.8412698412698), (183.73118279569894, 273.20430107526886), (408.8529411764706, 261.45588235294116), (489.758064516129, 255.1290322580645), (456.4117647058823, 255.86764705882354), (393.3220338983051, 252.864406779661), (583.7888888888889, 255.35555555555555), (598.4827586206897, 255.44827586206895), (350.1828793774319, 253.55642023346303), (286.1206896551724, 249.5), (226.78333333333333, 248.71666666666667), (256.35897435897436, 250.76923076923077), (573.8148148148148, 242.1111111111111), (557.0140845070423, 249.7887323943662), (479.5405405405406, 244.83783783783784), (433.06716417910445, 244.53731343283582), (164.4920634920635, 241.07936507936506), (529.62, 242.74), (202.48543689320388, 243.27508090614887), (570.2962962962963, 229.23456790123456), (548.8421052631579, 210.25263157894736), (490.609375, 198.984375), (420.1427247451344, 221.5908248378128)]
    #list = [(57.5, 749.1818181818182), (32.81818181818182, 734.7272727272727), (284.5, 702.0147058823529), (416.8, 690.725), (418.1967213114754, 676.5245901639345), (404.9270833333333, 677.7291666666666), (391.2878787878788, 677.4848484848485), (385.71621621621625, 676.0), (378.6794871794872, 672.4358974358975), (139.13750000000002, 662.1375), (126.70886075949367, 664.3291139240506), (157.89361702127658, 660.0070921985815), (118.31481481481481, 640.4074074074074), (152.61702127659575, 635.4042553191489), (406.2115384615385, 636.5384615384615), (413.03921568627453, 628.2549019607843), (211.11688311688314, 630.6363636363636), (137.13513513513513, 629.7027027027027), (421.68253968253964, 624.7460317460317), (126.91752577319588, 629.1958762886597), (426.94047619047615, 621.0), (225.9, 615.0714285714286), (431.50299401197606, 635.9520958083833), (121.1358024691358, 613.7037037037037), (435.6, 604.825), (382.258064516129, 594.9354838709677), (247.52542372881356, 593.271186440678), (291.7017543859649, 589.2456140350877), (384.0, 568.421875), (359.2096774193548, 562.5645161290322), (401.29411764705884, 565.2235294117647), (183.1304347826087, 549.5), (375.58, 555.15), (420.05263157894734, 544.0526315789473), (389.56363636363636, 553.8818181818182), (95.24193548387096, 541.0322580645161), (234.21875, 541.328125), (76.57142857142857, 537.0816326530612), (345.5344827586207, 531.2241379310344), (190.48148148148147, 529.4629629629629), (407.3114754098361, 526.7540983606558), (367.86538461538464, 526.0576923076924), (247.421875, 528.21875), (151.8658536585366, 524.6463414634146), (397.1428571428571, 509.4126984126984), (335.6132075471698, 524.1509433962264), (358.44230769230774, 507.8076923076923), (425.97333333333336, 511.52000000000004), (255.90804597701148, 512.8850574712644), (138.40425531914894, 503.2127659574468), (417.82022471910113, 507.2022471910112), (167.1125, 493.95000000000005), (77.24137931034483, 496.4655172413793), (430.36538461538464, 493.0192307692308), (56.62666666666667, 499.64000000000004), (191.0, 497.5157894736842), (301.64935064935065, 489.42857142857144), (80.0, 485.72580645161287), (177.9056603773585, 483.47169811320754), (322.94117647058823, 478.4117647058823), (271.1894736842105, 480.13684210526316), (370.71428571428567, 470.9761904761904), (213.6923076923077, 470.4615384615385), (84.53623188405797, 477.7536231884058), (235.6875, 470.0), (165.3548387096774, 467.22580645161287), (261.7758620689655, 473.37931034482756), (403.97705544933075, 485.01338432122367), (318.5, 451.7741935483871), (331.7042253521127, 453.32394366197184), (378.2596153846154, 457.91346153846155), (184.04016064257027, 459.5220883534136), (123.71764705882353, 452.49411764705883), (245.14814814814812, 447.00925925925924), (355.52127659574467, 470.3659574468085), (197.50458715596332, 440.69724770642205), (173.23333333333335, 417.93333333333334), (99.61666666666666, 421.46666666666664), (160.2037037037037, 407.3148148148148), (273.41159586681977, 432.27669345579795), (101.97916666666666, 392.10416666666663), (142.75757575757578, 394.2828282828283), (124.16666666666666, 370.0238095238095), (140.38888888888889, 365.5833333333333), (150.41958041958043, 364.83216783216784), (98.98305084745763, 351.2542372881356), (50.38356164383561, 345.0684931506849), (40.44444444444444, 339.7111111111111), (134.8103448275862, 331.41379310344826), (124.49242424242425, 342.74242424242425), (108.66071428571428, 323.5), (54.89473684210526, 322.5131578947368), (89.22727272727272, 329.7272727272727), (60.64285714285714, 306.5), (113.67597765363129, 306.27932960893855), (67.40845070422536, 296.1267605633803), (94.35036496350365, 286.992700729927), (448.03389830508473, 275.7118644067797), (86.77551020408163, 276.69387755102036), (438.67241379310343, 265.0603448275862), (66.1048492791612, 280.0091743119266), (420.1475409836066, 239.42950819672132), (426.828125, 217.8125)]
    #r.jpg
    #list = [(325.66336633663366, 568.1485148514852), (735.9622641509434, 566.4528301886792), (304.9627659574468, 558.8244680851063), (375.2881355932203, 541.8983050847457), (499.68, 541.3866666666667), (339.91186440677967, 548.5186440677966), (747.7254901960785, 540.5686274509803), (380.87179487179486, 535.3333333333334), (302.18840579710144, 534.3478260869565), (356.81188118811883, 529.8811881188119), (496.24561403508767, 520.719298245614), (537.1428571428571, 521.4285714285713), (485.95081967213116, 518.0819672131148), (480.5, 513.3620689655172), (401.5, 513.1451612903226), (432.6621621621622, 508.12162162162167), (268.50189393939394, 529.9791666666666), (562.0, 503.8863636363636), (540.728813559322, 502.7457627118644), (318.0705882352941, 504.98823529411766), (403.4829931972789, 497.1972789115646), (355.5496453900709, 510.241134751773), (269.6553672316384, 499.728813559322), (330.3469387755102, 492.1632653061224), (356.3805309734513, 490.5221238938053), (626.6779661016949, 493.93220338983053), (475.3076923076923, 484.4307692307693), (499.78125, 481.78125), (365.51724137931035, 484.37931034482756), (640.6800000000001, 479.98), (298.4307228915663, 500.4819277108434), (611.1475409836066, 476.8524590163935), (330.03472222222223, 478.6944444444444), (501.5185185185185, 471.9012345679012), (640.5, 471.625), (663.75, 471.1315789473684), (462.23943661971833, 466.3661971830986), (352.3963414634147, 470.75), (550.4357798165138, 465.16055045871565), (662.1818181818182, 458.7532467532468), (593.4406779661017, 455.3050847457627), (502.91666666666663, 455.71875), (353.5230769230769, 454.2923076923077), (557.6875, 449.3125), (464.75531914893617, 454.8085106382979), (413.4117647058823, 465.2052287581699), (637.8947368421052, 444.36842105263156), (391.82758620689657, 440.7586206896552), (374.375, 443.7361111111111), (604.75, 439.1973684210526), (659.8794326241134, 439.79432624113474), (413.1515151515152, 430.6136363636364), (576.2421875, 415.71875), (588.3823529411765, 393.0), (605.0784313725491, 383.80392156862746), (482.9714285714286, 375.5714285714286), (577.2542372881356, 370.66101694915255), (539.484375, 370.515625), (613.0650406504066, 367.56097560975616), (581.5324675324675, 359.7012987012987), (530.5263157894736, 361.14912280701753), (590.0, 351.04545454545456), (481.45901639344265, 347.77049180327873), (617.4310344827586, 342.3620689655172), (567.8965517241379, 341.5), (605.7313432835821, 319.88059701492534), (530.7938144329897, 321.2783505154639), (701.5428571428571, 313.8142857142857), (495.1333333333333, 310.64444444444445), (594.0409356725146, 305.7134502923976), (538.3369565217391, 301.79347826086956), (504.2173913043478, 301.0869565217391), (566.1851851851851, 294.9074074074074), (472.05263157894734, 290.8333333333333), (630.6304347826086, 285.7826086956522), (522.1045751633987, 284.98039215686276), (668.6875, 282.79166666666663), (564.8251121076233, 269.6031390134529), (604.8214285714286, 253.16071428571428), (581.6393442622951, 243.08196721311478), (614.7739130434783, 242.0782608695652), (674.6949152542372, 238.03389830508473), (480.664496439471, 359.1576805696846), (574.2461538461539, 225.33846153846156), (678.2394366197183, 220.3661971830986), (652.4489795918366, 220.20408163265304), (461.68794326241135, 222.52482269503545), (666.9298245614035, 211.7017543859649), (670.4893617021277, 206.5), (554.4897360703812, 209.2434017595308), (570.96875, 197.84375), (637.551724137931, 191.86206896551724), (675.9158878504672, 193.14953271028037), (627.4629629629629, 184.98148148148147), (665.3925233644859, 180.25233644859813), (690.6500000000001, 181.35000000000002), (624.2461538461539, 176.30769230769232), (621.0, 171.04545454545456), (518.9080188679245, 181.9740566037736), (627.6259541984732, 167.02290076335876), (499.5470905818836, 226.76844631073783), (666.2622950819673, 164.9016393442623), (239.2463768115942, 180.78743961352657), (605.1444444444445, 162.27777777777777), (599.0, 158.38636363636365), (265.2905982905983, 159.9059829059829), (273.85263157894735, 154.03157894736842)]
    bianjie(list)
    img = cv2.imread("IMG_0613.JPG")
    res = cv2.putText(img,str(bianjie(list)),(100,100),cv2.FONT_HERSHEY_COMPLEX,2.0,(0,0,255),5)
    cv2.imwrite('bianjie.jpg',res)